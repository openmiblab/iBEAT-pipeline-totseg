"""Editing of masks, or replacement of automasks by edited masks"""

import os
import logging
import numpy as np
import dbdicom as db
from totalsegmentator.map_to_binary import class_map

from utils import data, edit





def organ_mask(build_path, group, site=None, task='total_mr', organ='pancreas'):

    datapath = os.path.join(build_path, 'dixon', 'stage_2_data')
    maskpath = os.path.join(build_path, 'totseg', 'stage_1_segment')
    editpath = os.path.join(build_path, 'totseg', 'stage_4_edit')
    os.makedirs(editpath, exist_ok=True)

    if group == 'Controls':
        sitedatapath = os.path.join(datapath, "Controls") 
        sitemaskpath = os.path.join(maskpath, "Controls")
        siteeditpath = os.path.join(editpath, "Controls")
    else:
        sitedatapath = os.path.join(datapath, "Patients", site) 
        sitemaskpath = os.path.join(maskpath, "Patients", site)
        siteeditpath = os.path.join(editpath, "Patients", site)

    # List of selected dixon series
    record = data.dixon_record()

    # Invert class map
    label_map = {v: k for k, v in class_map[task].items()}

    # Loop over the autogenerated masks
    for mask_series in db.series(sitemaskpath):

        # Skip if not the correct task
        if mask_series[-1][0] != task:
            continue

        # Patient and output study
        patient = mask_series[1]
        study = mask_series[2][0]

        # Skip if the edited masks already exist
        edited_mask_study = [siteeditpath, patient, (study, 0)]
        edited_mask_series = edited_mask_study + [(f"{organ}_edited", 0)]
        if edited_mask_series in db.series(edited_mask_study):
            continue

        # Get the out-phase sequence
        sequence = data.dixon_series_desc(record, patient, study)
        series_op = [sitedatapath, patient, study, sequence + '_out_phase']
        op = db.volume(series_op)

        # Get the auto-mask
        auto_label_series = [sitemaskpath, patient, study, task]
        auto_label = db.volume(auto_label_series)

        # Edit the mask and save
        try:
            edited_label = edit.edit_mask_with_napari(op.values, auto_label.values, default_label=label_map[organ])
        except Exception as e:
            logging.error(f"{patient} {study} error editing mask: {e}")
        else:
            edited_mask = edited_label == label_map[organ]
            vol = (edited_mask.astype(np.int16), op.affine)
            db.write_volume(vol, edited_mask_series, ref=series_op)
            # if not np.array_equal(auto_mask.values, vol[0]):
            #   db.write_volume(vol, edited_mask_series, ref=series_op)

